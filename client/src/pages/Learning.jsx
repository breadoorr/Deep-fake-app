import React, { useState, useEffect } from "react";
import Header from "../components/Header";
import Footer from "../components/Footer";
import NotFound from "../components/notFound";
import { useNavigate } from "react-router-dom";
import Confetti from "react-confetti";
import Champ from "../asseta/images/little-dance.gif";
import '@fontsource/roboto';
import '@fontsource/space-mono';


import './Learning.css';

export const Learning = () => {
    const navigate = useNavigate();
    const [quizStarted, setQuizStarted] = useState(false);
    const [score, setScore] = useState(0);
    const [currentQuestion, setCurrentQuestion] = useState(0);
    const [currentInfo, setCurrentInfo] = useState(0);
    const [currentPage, setCurrentPage] = useState(0);
    const [isSmallScreen, setIsSmallScreen] = useState(false);
    const [feedback, setFeedback] = useState("");
    const [showNext, setShowNext] = useState(false);
    const [selectedOption, setSelectedOption] = useState(null);
    const [hasError, setHasError] = useState(false);


    useEffect(() => {
        const handleResize = () => {
            setIsSmallScreen(window.innerWidth <= 800);
        };
        handleResize();
        window.addEventListener("resize", handleResize);
        return () => {
            window.removeEventListener("resize", handleResize);
        };
    }, []);

    useEffect(() => {
        document.body.style.backgroundColor = "#111";
        document.body.style.color = "#fff";
    }, []);

    const questions = [
        {
            question: "What is the primary technology behind deepfakes?",
            options: [
                "Blockchain",
                "Generative Adversarial Networks (GANs)",
                "Neural Style Transfer",
                "Convolutional Neural Networks",
            ],
            correct: 1,
        },
        {
            question: "What role does the discriminator play in the GAN process?",
            options: [
                "Detects fake content",
                "Generates fake content",
                "Collects training data",
                "Adjusts image resolution",
            ],
            correct: 0,
        },
        {
            question: "Which of the following is a positive use of deepfakes?",
            options: [
                "Fake news",
                "Political manipulation",
                "AI-assisted therapy",
                "Financial fraud",
            ],
            correct: 2,
        },
        {
            question: "What is a common sign of a deepfake?",
            options: [
                "Perfectly natural expressions",
                "Asymmetrical lighting or irregular blinking",
                "Flawless audio synchronization",
                "Consistent file metadata",
            ],
            correct: 1,
        },
        {
            question: "What is a common ethical concern regarding deepfakes?",
            options: [
                "Enhancing movie realism",
                "Invading privacy or spreading misinformation",
                "Reducing video production costs",
                "Training AI models",
            ],
            correct: 1,
        }
    ];

    const info = [
        {
            header: "Introduction to Deepfakes",
            content: (
                <p style={{
                    fontFamily: "'Space Mono', monospace",
                    fontSize: "1.4rem",
                    lineHeight: isSmallScreen ? "1.3" : "1.8",
                    letterSpacing: isSmallScreen ? "-0.6px" : "0px",
                    wordSpacing: isSmallScreen ? "-1.2px" : "0px"
                }}>
                    Deepfake - synthetic media, including images, videos, and audio, generated by artificial
                    intelligence (AI) technology that portray something that does not exist in reality or events that
                    have never occurred.
                    <a
                        href="https://www.britannica.com/technology/deepfake"
                        target="_blank"
                        rel="noopener noreferrer"
                        style={{
                            color: "#4CAF50",
                            textDecoration: "none",
                            marginLeft: "5px",
                            fontFamily: "'Space Mono', monospace",
                            fontSize: "1.3rem"
                        }}
                    >
                        Read more
                    </a>
                </p>
            )
        },
        {
            header: "How Deepfakes Are Made",
            content: (
                <p style={{
                    fontSize: "1.4rem",
                    lineHeight: isSmallScreen ? "1.3" : "1.8",
                    letterSpacing: isSmallScreen ? "-0.6px" : "0px",
                    wordSpacing: isSmallScreen ? "-1.2px" : "0px",
                    fontFamily: "'Space Mono', monospace",
                }}>
                    Deepfakes use massive image and video datasets to train AI algorithms. To iteratively increase the
                    realism of generated media, GANs use two networks: the discriminator, which detects fakes, and the
                    generator, which produces fake content.
                    <a
                        href="https://spectrum.ieee.org/what-is-deepfake"
                        target="_blank"
                        rel="noopener noreferrer"
                        style={{
                            color: "#4CAF50",
                            textDecoration: "none",
                            marginLeft: "5px",
                            fontFamily: "'Space Mono', monospace",
                            fontSize: "1.3rem"
                        }}
                    >
                        Read more
                    </a>
                </p>
            )
        },
        {
            header: "Applications of Deepfakes",
            content: (
                <p style={{
                    fontFamily: "'Space Mono', monospace",
                    fontSize: "1.4rem",
                    lineHeight: isSmallScreen ? "1.3" : "1.8",
                    letterSpacing: isSmallScreen ? "-0.6px" : "0px",
                    wordSpacing: isSmallScreen ? "-1.2px" : "0px"
                }}>
                    Positive Uses:<br/>
                    - Entertainment<br/>
                    - Education and Training<br/><br/>
                    Negative Uses:<br/>
                    - Political Propaganda<br/>
                    - Fake News<br/>
                    - Fraud
                </p>
            )
        },
        {
            header: "How to Distinguish Deepfakes from Real Media",
            content: (
                <ul className={"questionUL"}>
                    <li>
                        <strong style={{color: "#4CAF50", fontFamily: "'Space Mono', monospace"}}>Unnatural
                            Details:</strong> Asymmetrical lighting, irregular expressions, or blinking.
                    </li>
                    <li>
                        <strong style={{color: "#4CAF50", fontFamily: "'Space Mono', monospace"}}>Image
                            Artifacts:</strong> Blurriness, pixelation, or odd face boundaries.
                    </li>
                    <li>
                        <strong style={{color: "#4CAF50", fontFamily: "'Space Mono', monospace"}}>Audio-Visual
                            Mismatches:</strong> Lip movements not matching audio.
                    </li>
                    <li>
                        <strong style={{color: "#4CAF50", fontFamily: "'Space Mono', monospace"}}>Metadata
                            Analysis:</strong> File properties showing editing.
                    </li>
                    <li>
                        <strong style={{color: "#4CAF50", fontFamily: "'Space Mono', monospace"}}>Detection
                            Tools:</strong> Use tools like Deepware Scanner or Microsoft's Video Authenticator.
                    </li>
                </ul>
            )
        },
        {
            header: "Ethical and Legal Implications",
            content: (
                <p style={{
                    fontFamily: "'Space Mono', monospace",
                    fontSize: "1.4rem",
                    lineHeight: isSmallScreen ? "1.3" : "1.8",
                    letterSpacing: isSmallScreen ? "-0.6px" : "0px",
                    wordSpacing: isSmallScreen ? "-1.2px" : "0px",
                }}>
                    Deepfakes present moral risks such as invasions of privacy, reputational harm, and cybercrime
                    misuse. Although there are few legal restrictions, some areas demand the disclosure of AI content
                    and prohibit detrimental usage.
                    <a
                        href="https://jme.bmj.com/content/early/2024/09/30/jme-2024-109985"
                        target="_blank"
                        rel="noopener noreferrer"
                        style={{
                            color: "#4CAF50",
                            textDecoration: "none",
                            marginLeft: "5px",
                            fontFamily: "'Space Mono', monospace",
                            fontSize: "1.3rem"
                        }}
                    >
                        Read more
                    </a>
                </p>
            )
        }
    ];

    const startQuiz = () => {
        setQuizStarted(true);
    };

    const handleRead = () => {
        if (currentInfo < info.length - 1) {
            setCurrentInfo(currentInfo + 1);
            setCurrentPage(currentPage + 1);
        } else {
            setQuizStarted(true);
            setCurrentPage(currentPage + 1);
        }
    };

    const goNextQuestion = () => {
        setFeedback("");
        setShowNext(false);
        setSelectedOption(null);
        if (currentQuestion < questions.length - 1) {
            setCurrentQuestion(currentQuestion + 1);
            setCurrentPage(currentPage + 1);
        } else {
            setQuizStarted(false);
            setCurrentPage(currentPage + 1);
        }
    };

    const handleAnswer = (index) => {
        if (selectedOption !== null) return;

        setSelectedOption(index);
        const correctIndex = questions[currentQuestion].correct;

        if (index === correctIndex) {
            setScore(score + 1);
            setFeedback("Correct! 🎉");
            setTimeout(() => {
                goNextQuestion();
            }, 2000);
        } else {
            setFeedback(
                `Incorrect! The correct answer is "${questions[currentQuestion].options[correctIndex]}".`
            );
            setShowNext(true);
        }
    };

    const containerStyle = {
        padding: "2.5rem",
        maxWidth: "600px",
        width: '90%',
        margin: "6rem auto",
        backgroundColor: "rgba(50, 50, 50, 0.9)",
        color: "#fff",
        boxShadow: "0 10px 20px rgba(0, 0, 0, 0.6)",
        textAlign: "center",
        lineHeight: "1.8",
        borderRadius: "10px",
        fontFamily: "'Space Mono', monospace",
    };

    const quizButtonStyle = {
        display: "block",
        margin: "1rem auto",
        padding: "1rem 1.5rem",
        background: "#333",
        color: "#fff",
        border: "1px solid #4CAF50",
        borderRadius: "5px",
        fontSize: "1.3rem",
        width: "100%",
        maxWidth: "300px",
        cursor: "pointer",
        transition: "background 0.3s",
        fontFamily: "'Space Mono', monospace",
    };

    const buttonStyle = {
        marginTop: "2rem",
        padding: "1rem 2rem",
        background: "linear-gradient(45deg, #4CAF50, #32a852)",
        color: "#fff",
        border: "none",
        borderRadius: "5px",
        fontSize: "1.2rem",
        cursor: "pointer",
        transition: "all 0.3s",
        fontFamily: "'Space Mono', monospace",
    };

    const getOptionStyle = (index) => {
        const style = {...quizButtonStyle};
        const correctIndex = questions[currentQuestion].correct;

        if (feedback.includes("Incorrect")) {
            if (index !== correctIndex) {
                style.border = "2px solid #E53935";
            } else {
                style.border = "2px solid #4CAF50";
            }
        }
        return style;
    };

    return (
        <>
            <Header/>
            <a href="#" className="back-arrow-learning" title="Go Back" onClick={() => navigate('/menu')}>
                <i className="bi bi-arrow-left"></i>
            </a>

            {hasError ? (
                <NotFound/>
            ) : (
                <div className="w-screen">
                    <div style={containerStyle}>
                        {!quizStarted && currentPage === 0 && (
                            <>
                                <h1 style={{
                                    fontSize: "2.1rem",
                                    marginBottom: "1.5rem",
                                    color: "#4CAF50",
                                    fontFamily: "'Space Mono', monospace",
                                }}>
                                    Understanding Deepfakes
                                </h1>
                                <p style={{
                                    marginBottom: "1rem",
                                    fontSize: "1.6rem",
                                    color: "#ddd",
                                    fontFamily: "'Space Mono', monospace"
                                }}>
                                    Deepfakes are AI-generated media that can alter reality.
                                    They can be used for both creative purposes and malicious intent.
                                </p>
                                <button onClick={startQuiz} style={buttonStyle}>
                                    Start Quiz
                                </button>
                            </>
                        )}

                        {quizStarted && currentPage % 2 === 0 && (
                            <div>
                                <h2 className={"quizTitle"}>
                                    {info[currentInfo].header}
                                </h2>
                                <div style={{fontSize: '1rem'}}>
                                    {info[currentInfo].content}
                                    <button
                                        onClick={handleRead}
                                        style={quizButtonStyle}
                                    >
                                        Next
                                    </button>
                                </div>
                            </div>
                        )}

                        {quizStarted && currentPage % 2 !== 0 && (
                            <div>
                                <div style={{marginBottom: "1rem"}}>
                                    <div
                                        style={{
                                            backgroundColor: "#555",
                                            height: "10px",
                                            borderRadius: "5px",
                                            overflow: "hidden",
                                            boxShadow: "0 2px 4px rgba(0, 0, 0, 0.2)",
                                        }}
                                    >
                                        <div
                                            style={{
                                                width: `${((currentQuestion + 1) / questions.length) * 100}%`,
                                                height: "100%",
                                                backgroundColor: "#4CAF50",
                                                boxShadow: "0 0 10px #4CAF50",
                                                transition: "width 0.3s ease-in-out",
                                            }}
                                        ></div>
                                    </div>
                                    <p style={{
                                        color: "#fff",
                                        fontSize: "1.3rem",
                                        marginTop: "0.5rem",
                                        fontFamily: "'Space Mono', monospace",
                                    }}>
                                        Question {currentQuestion + 1} of {questions.length}
                                    </p>
                                </div>
                                <h2 className={"questionStyle"}>
                                    {questions[currentQuestion].question}
                                </h2>
                                <div style={{fontSize: '1rem'}}>
                                    {questions[currentQuestion].options.map((option, index) => (
                                        <button
                                            key={index}
                                            onClick={() => handleAnswer(index)}
                                            style={getOptionStyle(index)}
                                            disabled={selectedOption !== null}
                                        >
                                            {option}
                                        </button>
                                    ))}
                                </div>
                                {feedback && (
                                    <p className="feedback-learning" style={{
                                        color: feedback.includes("Correct") ? "#4CAF50" : "#E53935",
                                        animation: "fadeIn 1s ease-in-out"
                                    }}>
                                        {feedback}
                                    </p>
                                )}
                                {showNext && (
                                    <button
                                        onClick={goNextQuestion}
                                        style={buttonStyle}
                                    >
                                        Next
                                    </button>
                                )}
                            </div>
                        )}

                        {!quizStarted && currentPage > 0 && (
                            <div>
                                <Confetti
                                    style={{width: '400px', height: "600px"}}
                                    particleSize={100}
                                    numberOfPieces={250}
                                />
                                <h2 style={{color: "#4CAF50", fontSize: "1.9rem", marginBottom: "1rem"}}>
                                    Quiz Completed!
                                </h2>
                                <p style={{marginBottom: "1.5rem", fontSize: "1.2rem"}}>
                                    Your Score: <strong>{score}/{questions.length}</strong>
                                </p>
                                <img
                                    src={Champ}
                                    alt="Champion"
                                    style={{
                                        width: '200px',
                                        marginBottom: '20px',
                                        borderRadius: '10px',
                                        display: 'block',
                                        margin: '0 auto'
                                    }}
                                />
                                <button
                                    onClick={() => {
                                        setQuizStarted(false);
                                        setScore(0);
                                        setCurrentPage(0);
                                        setCurrentInfo(0);
                                        setCurrentQuestion(0);
                                        setFeedback("");
                                        setShowNext(false);
                                        setSelectedOption(null);
                                    }}
                                    style={buttonStyle}
                                >
                                    Try Again
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            )}

            <Footer/>
        </>
    );
}
